// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String        @id @default(uuid())
  email     String     @unique
  name      String?
  image      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clerkUserId String? @unique
  stripeCustomerId String? @unique
  subscriptionId String? @unique
  subscription Subscription[]
  categories Category[] 
  monthlyPlans     MonthlyPlan[]
}



model Subscription {
  stripeSubscription String @id  @unique
  interval String
  status String
  planId String
  currentPeriodStart Int
  currentPeriodEnd Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @unique
  user User @relation(fields: [userId], references: [clerkUserId])
}

model Category {
  id            String            @id @default(uuid())
  name          String
  type          CategoryType      
  budgets       Budget[] 
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  plans         PlanCategory[]

  @@unique([name, userId]) // Chaque utilisateur a ses propres catégories uniques
}

model Budget {
  id            String             @id @default(uuid())
  name          String
  amount        Float              @default(0.0) 
  startAmount   Float?              @default(0.0) 
  startDate     DateTime?
  endDate       DateTime?
  categoryId    String
  category      Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  monthlyPlans  MonthlyPlanBudget[]
  monthlyPlanId String?
    
  @@unique([name, categoryId, monthlyPlanId]) 
  @@index([startDate]) 
}

model Transaction {
  id                String     @id @default(uuid())
  name              String
  amount            Float
  type              TransactionType
  budgetId          String
  budget            Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
}

model MonthlyPlan {
  id           String              @id @default(uuid())
  month        Int                 // Mois de la planification (1-12)
  year         Int
  userId       String
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories   PlanCategory[]
  budgets      MonthlyPlanBudget[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@unique([month, year, userId])  // Une planification unique par utilisateur pour un mois donné
}

model MonthlyPlanBudget {
  id            String             @id @default(uuid())
  monthlyPlanId String
  budgetId      String

  monthlyPlan   MonthlyPlan        @relation(fields: [monthlyPlanId], references: [id], onDelete: Cascade)
  budget        Budget             @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@unique([monthlyPlanId, budgetId]) // Empêche les doublons entre MonthlyPlan et Budget
}

model PlanCategory {
  id           String        @id @default(uuid())
  amount       Float         @default(0.0) // Montant prévu pour cette catégorie
  categoryId   String
  category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  monthlyPlanId String
  monthlyPlan   MonthlyPlan  @relation(fields: [monthlyPlanId], references: [id], onDelete: Cascade)

  @@unique([categoryId, monthlyPlanId]) // Une catégorie ne peut être planifiée qu'une fois par mois
}

enum CategoryType {
  REVENUS
  DETTES
  EPARGNES
  INVESTISSEMENTS
  DEPENSES_FIXES
  DEPENSES_VARIABLES
}

enum TransactionType {
  REMOVE
  ADD
}

